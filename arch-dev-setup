#!/bin/bash
set -xeuo pipefail

sudo whoami # check for sudo

df | grep /boot

packages="
 acpi
 alsa-utils
 arandr
 arch-install-scripts
 automake
 bash-completion
 ccache
 clang
 cpupower
 cronie
 cuda
 difftastic
 discord
 dnsutils
 emacs-nox
 entr
 expect
 fakeroot
 fastfetch
 feh
 firefox
 freetype2
 gcc
 gdb
 git
 glfw
 gnome-disk-utility
 go
 gperftools
 gtk2
 hdparm
 htop
 hwinfo
 iw
 keepassxc
 libpipewire
 libsndfile
 libsodium
 libxft
 libxinerama
 libxml2
 libxslt
 linux-lts
 lldb
 lsof
 lz4
 maim
 make
 man
 mold
 mousepad
 net-tools
 noto-fonts-cjk
 npm
 nvidia-dkms
 nvidia-settings
 nvidia-utils
 obs-studio
 openimagedenoise
 openresolv
 openssh
 pacman-contrib
 patch
 pavucontrol
 pipewire
 pipewire-alsa
 pipewire-docs
 pipewire-jack
 pipewire-pulse
 pkg-config
 power-profiles-daemon
 python-matplotlib
 python-pip
 python-setuptools
 python-virtualenv
 qrencode
 rclone
 ripgrep
 rsync
 rtkit
 rust-analyzer
 sdl2
 spotify-launcher
 sudo
 the_silver_searcher
 thunar
 tk
 tmux
 tree
 udisks2
 unbound
 unzip
 util-linux
 vim
 wget
 words
 wpa_supplicant
 xclip
 xdotool
 xorg-server
 xorg-twm
 xorg-xbacklight
 xorg-xclock
 xorg-xdpyinfo
 xorg-xinit
 xorg-xinput
 xorg-xmodmap
 xorg-xset
 xorg-xsetroot
 xprintidle
 xsel
 yaml-cpp
 zbar
 zip
"

sudo pacman --noconfirm --needed -S $packages

sudo systemctl enable fstrim.timer

sudo systemctl start cronie
sudo systemctl enable cronie

sudo systemctl start systemd-timesyncd
sudo systemctl enable systemd-timesyncd

systemctl --user enable pipewire.socket
systemctl --user start pipewire.socket
systemctl --user enable pipewire-pulse.socket
systemctl --user start pipewire-pulse.socket

cd ~

curl https://better-game.network/dwm_bg.png > ~/.bg.png

echo '#!/bin/bash
maim -s >/tmp/screenshot.png' | sudo tee "/usr/local/bin/screenshot"

echo '#!/bin/bash
maim >/tmp/screenshot.png' | sudo tee "/usr/local/bin/screenshot-fullscreen"

echo '#!/bin/bash
mousepad "$@"' | sudo tee "/usr/local/bin/textedit"

sudo chmod +x /usr/local/bin/*

(
    mkdir -p opt
    cd opt

    if [ ! -d nerd-fonts-inconsolata ]; then
	    git clone https://aur.archlinux.org/nerd-fonts-inconsolata.git
    fi
    (
	    cd nerd-fonts-inconsolata
	    git add . && git reset --hard
        git checkout master
        git pull
        git checkout 6bd470b3a88c400d775933430fe4f1ccbed9933a
        makepkg -sf --noconfirm
        sudo pacman --noconfirm -U *.zst
    )

    if [ ! -d agr ]; then
	    git clone https://github.com/nathants/agr
    fi
	(
	    cd agr
	    sudo python setup.py develop
	)

    if [ ! -d slock ]; then
	    git clone https://git.suckless.org/slock
    fi
    (
	    cd slock
	    git add . && git reset --hard
        git checkout master
        git pull
        git checkout 35633d45672d14bd798c478c45d1a17064701aa9
        agr -y nogroup nobody
        sed -i '/XBell/d' slock.c
        make
        sudo make install
        echo '
[Unit]
Description=Lock X session using slock for user %i
Before=sleep.target

[Service]
User=%i
Environment=DISPLAY=:0
ExecStartPre=/usr/bin/xset dpms force suspend
ExecStart=/usr/local/bin/slock

[Install]
WantedBy=sleep.target
' | sudo tee /etc/systemd/system/slock@.service
        sudo systemctl daemon-reload
        user=$(whoami)
        sudo systemctl enable slock@$user
    )

    if [ ! -d dwm ]; then
	    git clone https://git.suckless.org/dwm
    fi
    (
	    cd dwm
	    git add . && git reset --hard
        git checkout master
        git pull
        git checkout cb3f58ad06993f7ef3a7d8f61468012e2b786cab


        tmp=$(mktemp)

        cat > $tmp <<'EOF'
diff --git a/config.def.h b/config.def.h
index 1c0b587..bf57741 100644
--- a/config.def.h
+++ b/config.def.h
@@ -5,17 +5,52 @@ static const unsigned int borderpx  = 1;        /* border pixel of windows */
 static const unsigned int snap      = 32;       /* snap pixel */
 static const int showbar            = 1;        /* 0 means no bar */
 static const int topbar             = 1;        /* 0 means bottom bar */
-static const char *fonts[]          = { "monospace:size=10" };
-static const char dmenufont[]       = "monospace:size=10";
+static const char *fonts[]          = { "Inconsolata Nerd Font:size=20" };
+static const char dmenufont[]       = "Inconsolata Nerd Font:size=20";
+
 static const char col_gray1[]       = "#222222";
 static const char col_gray2[]       = "#444444";
 static const char col_gray3[]       = "#bbbbbb";
 static const char col_gray4[]       = "#eeeeee";
 static const char col_cyan[]        = "#005577";
-static const char *colors[][3]      = {
-	/*               fg         bg         border   */
-	[SchemeNorm] = { col_gray3, col_gray1, col_gray2 },
-	[SchemeSel]  = { col_gray4, col_cyan,  col_cyan  },
+static const char col_black[]       = "#000000";
+static const char col_red[]         = "#ff0000";
+static const char col_yellow[]      = "#ffff00";
+static const char col_white[]       = "#ffffff";
+
+   /* solarized dark */
+static const char solarized_black[] = "#073642";  /*  0:     */
+static const char solarized_red[] = "#dc322f";  /*  1:       */
+static const char solarized_green[] = "#859900";  /*  2:     */
+static const char solarized_yellow[] = "#b58900";  /*  3:    */
+static const char solarized_blue[] = "#268bd2";  /*  4:      */
+static const char solarized_magenta[] = "#d33682";  /*  5:   */
+static const char solarized_cyan[] = "#2aa198";  /*  6:      */
+static const char solarized_white[] = "#eee8d5";  /*  7:     */
+static const char solarized_brblack[] = "#002b36";  /*  8:   */
+static const char solarized_brred[] = "#cb4b16";  /*  9:     */
+static const char solarized_brgreen[] = "#586e75";  /* 10:   */
+static const char solarized_bryellow[] = "#657b83";  /* 11:  */
+static const char solarized_brblue[] = "#839496";  /* 12:    */
+static const char solarized_brmagenta[] = "#6c71c4";  /* 13: */
+static const char solarized_brcyan[] = "#93a1a1";  /* 14:    */
+static const char solarized_brwhite[] = "#fdf6e3";  /* 15:   */
+
+static const char *colors[][7]      = {
+	/*					fg         bg          border   */
+	[SchemeNorm] =	 { col_gray3, col_gray1,  col_gray2 },
+	[SchemeSel]  =	 { col_gray4, col_cyan,   col_cyan },
+	[SchemeWarn] =	 { col_black, col_yellow, col_red },
+	[SchemeUrgent]=	 { col_white, col_red,    col_red },
+
+	[SchemeMine1]  =	 { col_gray1, solarized_yellow,   col_gray2 },
+	[SchemeMine2] =	 { col_gray1, solarized_red, col_gray2 },
+	[SchemeMine3]=	 { col_gray1, solarized_blue,    col_gray2 },
+
+	[SchemeMine4]  =	 { col_gray1, solarized_bryellow,   col_gray2 },
+	[SchemeMine5] =	 { col_gray1, solarized_brred, col_gray2 },
+	[SchemeMine6]=	 { col_gray1, solarized_brblue,    col_gray2 },
+
 };

 /* tagging */
@@ -28,13 +63,12 @@ static const Rule rules[] = {
 	 */
 	/* class      instance    title       tags mask     isfloating   monitor */
 	{ "Gimp",     NULL,       NULL,       0,            1,           -1 },
-	{ "Firefox",  NULL,       NULL,       1 << 8,       0,           -1 },
 };

 /* layout(s) */
 static const float mfact     = 0.55; /* factor of master area size [0.05..0.95] */
 static const int nmaster     = 1;    /* number of clients in master area */
-static const int resizehints = 1;    /* 1 means respect size hints in tiled resizals */
+static const int resizehints = 0;    /* 1 means respect size hints in tiled resizals */

 static const Layout layouts[] = {
 	/* symbol     arrange function */
@@ -59,31 +93,63 @@ static char dmenumon[2] = "0"; /* component of dmenucmd, manipulated in spawn()
 static const char *dmenucmd[] = { "dmenu_run", "-m", dmenumon, "-fn", dmenufont, "-nb", col_gray1, "-nf", col_gray3, "-sb", col_cyan, "-sf", col_gray4, NULL };
 static const char *termcmd[]  = { "st", NULL };

+
+int
+shifttag(int dist)
+{
+	    int i, curtags;
+	        int seltag = 0;
+		    curtags = selmon->tagset[selmon->seltags];
+		        for(i = 0; i < LENGTH(tags); i++) {
+				        if((curtags & (1 << i)) != 0) {
+						            seltag = i;
+							                break;
+									        }
+					    }
+			    seltag = (seltag + dist) % LENGTH(tags);
+			        if(seltag < 0)
+					        seltag += LENGTH(tags);
+				    return 1 << seltag;
+}
+
+void
+cycle(const Arg *arg)
+{
+	    Arg a = { .i = shifttag(arg->i) };
+	        view(&a);
+}
+
+void
+tagcycle(const Arg *arg)
+{
+	    Arg a = { .i = shifttag(arg->i) };
+	        tag(&a);
+		    view(&a);
+}
+
+
+
 static Key keys[] = {
 	/* modifier                     key        function        argument */
-	{ MODKEY,                       XK_p,      spawn,          {.v = dmenucmd } },
+	{ MODKEY|ShiftMask, XK_p,      spawn,          {.v = dmenucmd } },
 	{ MODKEY|ShiftMask,             XK_Return, spawn,          {.v = termcmd } },
-	{ MODKEY,                       XK_b,      togglebar,      {0} },
-	{ MODKEY,                       XK_j,      focusstack,     {.i = +1 } },
-	{ MODKEY,                       XK_k,      focusstack,     {.i = -1 } },
-	{ MODKEY,                       XK_i,      incnmaster,     {.i = +1 } },
-	{ MODKEY,                       XK_d,      incnmaster,     {.i = -1 } },
-	{ MODKEY,                       XK_h,      setmfact,       {.f = -0.05} },
-	{ MODKEY,                       XK_l,      setmfact,       {.f = +0.05} },
-	{ MODKEY,                       XK_Return, zoom,           {0} },
-	{ MODKEY,                       XK_Tab,    view,           {0} },
+	{ MODKEY|ShiftMask, XK_b,      togglebar,      {0} },
+	{ MODKEY|ShiftMask, XK_j,      focusstack,     {.i = +1 } },
+	{ MODKEY|ShiftMask, XK_k,      focusstack,     {.i = -1 } },
+	{ MODKEY|ShiftMask, XK_h,      cycle,       {.i = -1} },
+	{ MODKEY|ShiftMask, XK_l,      cycle,       {.i = +1} },
+	{ MODKEY|ShiftMask, XK_Return, zoom,           {0} },
+	{ MODKEY, XK_Tab,    view,           {0} },
 	{ MODKEY|ShiftMask,             XK_c,      killclient,     {0} },
-	{ MODKEY,                       XK_t,      setlayout,      {.v = &layouts[0]} },
-	{ MODKEY,                       XK_f,      setlayout,      {.v = &layouts[1]} },
-	{ MODKEY,                       XK_m,      setlayout,      {.v = &layouts[2]} },
-	{ MODKEY,                       XK_space,  setlayout,      {0} },
+	{ MODKEY|ShiftMask, XK_t,      setlayout,      {.v = &layouts[0]} },
+	{ MODKEY|ShiftMask, XK_f,      setlayout,      {.v = &layouts[1]} },
+	{ MODKEY|ShiftMask, XK_m,      setlayout,      {.v = &layouts[2]} },
+	{ MODKEY|ShiftMask, XK_space,  setlayout,      {0} },
 	{ MODKEY|ShiftMask,             XK_space,  togglefloating, {0} },
-	{ MODKEY,                       XK_0,      view,           {.ui = ~0 } },
+	{ MODKEY|ShiftMask, XK_0,      view,           {.ui = ~0 } },
 	{ MODKEY|ShiftMask,             XK_0,      tag,            {.ui = ~0 } },
-	{ MODKEY,                       XK_comma,  focusmon,       {.i = -1 } },
-	{ MODKEY,                       XK_period, focusmon,       {.i = +1 } },
-	{ MODKEY|ShiftMask,             XK_comma,  tagmon,         {.i = -1 } },
-	{ MODKEY|ShiftMask,             XK_period, tagmon,         {.i = +1 } },
+	{ MODKEY|ShiftMask, XK_i,  focusmon,       {.i = -1 } },
+	{ MODKEY|ShiftMask, XK_o, focusmon,       {.i = +1 } },
 	TAGKEYS(                        XK_1,                      0)
 	TAGKEYS(                        XK_2,                      1)
 	TAGKEYS(                        XK_3,                      2)
@@ -112,4 +178,3 @@ static Button buttons[] = {
 	{ ClkTagBar,            MODKEY,         Button1,        tag,            {0} },
 	{ ClkTagBar,            MODKEY,         Button3,        toggletag,      {0} },
 };
-
diff --git a/config.mk b/config.mk
index 6d36cb7..5d90f0c 100644
--- a/config.mk
+++ b/config.mk
@@ -27,7 +27,7 @@ LIBS = -L${X11LIB} -lX11 ${XINERAMALIBS} ${FREETYPELIBS}
 # flags
 CPPFLAGS = -D_DEFAULT_SOURCE -D_BSD_SOURCE -D_POSIX_C_SOURCE=2 -DVERSION=\"${VERSION}\" ${XINERAMAFLAGS}
 #CFLAGS   = -g -std=c99 -pedantic -Wall -O0 ${INCS} ${CPPFLAGS}
-CFLAGS   = -std=c99 -pedantic -Wall -Wno-deprecated-declarations -Os ${INCS} ${CPPFLAGS}
+CFLAGS   = -std=c99 -pedantic -Wall -Wno-deprecated-declarations -march=native -mtune=native -O3 -flto ${INCS} ${CPPFLAGS}
 LDFLAGS  = ${LIBS}

 # Solaris
diff --git a/dwm.c b/dwm.c
index 4465af1..7cf37fc 100644
--- a/dwm.c
+++ b/dwm.c
@@ -59,7 +59,7 @@

 /* enums */
 enum { CurNormal, CurResize, CurMove, CurLast }; /* cursor */
-enum { SchemeNorm, SchemeSel }; /* color schemes */
+enum { SchemeNorm, SchemeSel, SchemeWarn, SchemeUrgent, SchemeMine1, SchemeMine2, SchemeMine3, SchemeMine4, SchemeMine5, SchemeMine6 }; /* color schemes */
 enum { NetSupported, NetWMName, NetWMState, NetWMCheck,
        NetWMFullscreen, NetActiveWindow, NetWMWindowType,
        NetWMWindowTypeDialog, NetClientList, NetLast }; /* EWMH atoms */
@@ -701,11 +701,41 @@ drawbar(Monitor *m)
 	unsigned int i, occ = 0, urg = 0;
 	Client *c;

+    char *ts = stext;
+    char *tp = stext;
+    int tx = 0;
+    char ctmp;
+
 	/* draw status first so it can be overdrawn by tags later */
 	if (m == selmon) { /* status is only drawn on selected monitor */
 		drw_setscheme(drw, scheme[SchemeNorm]);
-		sw = TEXTW(stext) - lrpad + 2; /* 2px right padding */
-		drw_text(drw, m->ww - sw, 0, sw, bh, 0, stext, 0);
+
+        /* Chain length computed between escape sequence which slow down too
+         * much TEXTW function */
+        while(1) {
+            if ((unsigned int)*ts > LENGTH(colors)) { ts++; continue; }
+            ctmp = *ts;
+            *ts = '\0';
+            sw += TEXTW(tp) - lrpad;
+            if (ctmp == '\0') { break; }
+            *ts = ctmp;
+            tp = ++ts;
+        }
+        sw = sw + 2; /* 2px right padding */
+        ts = stext;
+        tp = stext;
+        while (1) {
+            if ((unsigned int)*ts > LENGTH(colors)) { ts++; continue; }
+            ctmp = *ts;
+            *ts = '\0';
+            drw_text(drw, m->ww - sw + tx, 0, sw - tx, bh, 0, tp, 0);
+            tx += TEXTW(tp) -lrpad;
+            if (ctmp == '\0') { break; }
+            drw_setscheme(drw, scheme[(unsigned int)(ctmp-1)]);
+            *ts = ctmp;
+            tp = ++ts;
+        }
+
 	}

 	for (c = m->clients; c; c = c->next) {
@@ -832,6 +862,11 @@ focusmon(const Arg *arg)
 void
 focusstack(const Arg *arg)
 {
+    FILE *fp;
+    fp=fopen("/dev/shm/emacs-save-open-buffer", "w");
+    fprintf(fp, "emacs gonna save after this file is modified\n");
+    fclose(fp);
+
 	Client *c = NULL, *i;

 	if (!selmon->sel)
@@ -2035,6 +2070,10 @@ updatewmhints(Client *c)
 void
 view(const Arg *arg)
 {
+    FILE *fp;
+    fp=fopen("/dev/shm/emacs-save-open-buffer", "w");
+    fprintf(fp, "emacs gonna save after this file is modified\n");
+    fclose(fp);
 	if ((arg->ui & TAGMASK) == selmon->tagset[selmon->seltags])
 		return;
 	selmon->seltags ^= 1; /* toggle sel tagset */

EOF

        patch -p1 < $tmp

	    make clean
	    make
	    sudo make install

        echo '
! capslock to alt
clear Lock
keycode 0x42 = Meta_L
! ctrl/win/alt -> ctrl/alt/ctrl
clear control
clear mod1
clear mod4
keycode 37  = Control_L
keycode 64  = Control_L
keycode 133 = Alt_L Meta_L
add control = Control_L Control_R
add mod1 = Alt_L Meta_L
add mod4 = Super_L Super_R
' > ~/.xmodmap

        echo '

# ConfigProperties:

RcFileLocale = C
DisplayStatusBar = Yes
SliderTextEntries = Yes
IncludeDisplayNameInConfigFile = No
UpdateRulesOnProfileNameChange = Yes
Timer = ECC_Settings_(GPU_0),Yes,1000
Timer = PowerMizer_Monitor_(GPU_0),Yes,1000
Timer = Thermal_Monitor_(GPU_0),Yes,1000
Timer = Memory_Used_(GPU_0),Yes,3000

# Attributes:

0/SyncToVBlank=0
0/LogAniso=0
0/FSAA=0
0/TextureClamping=0
0/FXAA=0
0/AllowFlipping=0
0/FSAAAppControlled=1
0/LogAnisoAppControlled=1
0/OpenGLImageSettings=0
0/FSAAAppEnhanced=0
0/ShowGraphicsVisualIndicator=0
[DPY:HDMI-0]/Dithering=0
[DPY:HDMI-0]/DitheringMode=0
[DPY:HDMI-0]/DitheringDepth=0
[DPY:HDMI-0]/ColorSpace=0
[DPY:HDMI-0]/ColorRange=0
[DPY:HDMI-0]/SynchronousPaletteUpdates=0
[DPY:DP-0]/RedBrightness=0.000000
[DPY:DP-0]/GreenBrightness=0.000000
[DPY:DP-0]/BlueBrightness=0.000000
[DPY:DP-0]/RedContrast=0.000000
[DPY:DP-0]/GreenContrast=0.000000
[DPY:DP-0]/BlueContrast=0.000000
[DPY:DP-0]/RedGamma=1.000000
[DPY:DP-0]/GreenGamma=1.000000
[DPY:DP-0]/BlueGamma=1.000000
[DPY:DP-0]/Dithering=0
[DPY:DP-0]/DitheringMode=0
[DPY:DP-0]/DitheringDepth=0
[DPY:DP-0]/DigitalVibrance=0
[DPY:DP-0]/ColorSpace=0
[DPY:DP-0]/ColorRange=0
[DPY:DP-0]/SynchronousPaletteUpdates=0
[DPY:DP-1]/Dithering=0
[DPY:DP-1]/DitheringMode=0
[DPY:DP-1]/DitheringDepth=0
[DPY:DP-1]/ColorSpace=0
[DPY:DP-1]/ColorRange=0
[DPY:DP-1]/SynchronousPaletteUpdates=0
[DPY:DP-2]/Dithering=0
[DPY:DP-2]/DitheringMode=0
[DPY:DP-2]/DitheringDepth=0
[DPY:DP-2]/ColorSpace=0
[DPY:DP-2]/ColorRange=0
[DPY:DP-2]/SynchronousPaletteUpdates=0
[DPY:DP-3]/Dithering=0
[DPY:DP-3]/DitheringMode=0
[DPY:DP-3]/DitheringDepth=0
[DPY:DP-3]/ColorSpace=0
[DPY:DP-3]/ColorRange=0
[DPY:DP-3]/SynchronousPaletteUpdates=0
[DPY:DP-4]/Dithering=0
[DPY:DP-4]/DitheringMode=0
[DPY:DP-4]/DitheringDepth=0
[DPY:DP-4]/ColorSpace=0
[DPY:DP-4]/ColorRange=0
[DPY:DP-4]/SynchronousPaletteUpdates=0
[DPY:DP-5]/Dithering=0
[DPY:DP-5]/DitheringMode=0
[DPY:DP-5]/DitheringDepth=0
[DPY:DP-5]/ColorSpace=0
[DPY:DP-5]/ColorRange=0
[DPY:DP-5]/SynchronousPaletteUpdates=0
[GPU:0]/GPUPowerMizerMode=1
' > ~/.nvidia-settings-rc

        echo '
 xmodmap ~/.xmodmap
 xrdb -merge ~/.Xresources
 feh --bg-scale ~/.bg.png
 nvidia-settings --load-config-only || true

 exec dwm
' > ~/.xinitrc

        echo '
Xcursor.theme: default
Xcursor.size: 16
' > ~/.Xresources

    )

    if [ ! -d dmenu ]; then
	    git clone https://git.suckless.org/dmenu
    fi
    (
	    cd dmenu
        git add . && git reset --hard
        git checkout master
        git pull
        git checkout 1a13d0465d1a6f4f74bc5b07b04c9bd542f20ba6

        tmp=$(mktemp)

        cat > $tmp <<'EOF'
diff --git a/config.mk b/config.mk
index 05d5a3e..744569a 100644
--- a/config.mk
+++ b/config.mk
@@ -24,7 +24,7 @@ LIBS = -L$(X11LIB) -lX11 $(XINERAMALIBS) $(FREETYPELIBS)

 # flags
 CPPFLAGS = -D_DEFAULT_SOURCE -D_BSD_SOURCE -D_XOPEN_SOURCE=700 -D_POSIX_C_SOURCE=200809L -DVERSION=\"$(VERSION)\" $(XINERAMAFLAGS)
-CFLAGS   = -std=c99 -pedantic -Wall -Os $(INCS) $(CPPFLAGS)
+CFLAGS   = -std=c99 -pedantic -Wall -O3 -flto -march=native -mtune=native $(INCS) $(CPPFLAGS)
 LDFLAGS  = $(LIBS)

 # compiler and linker

EOF

        patch -p1 < $tmp

	    make clean
	    make
	    sudo make install
    )

    if [ ! -d st ]; then
	    git clone https://git.suckless.org/st
    fi
    (
	    cd st
	    git add . && git reset --hard
        git checkout master
        git pull
        git checkout 4ef0cbd8b9371f37f7d02ef37b5378b879e6b8bf
        curl https://st.suckless.org/patches/solarized/st-no_bold_colors-0.8.1.diff > st.diff1
        [ 5a6e2b745c7746228e0ee4e84214e3ac7054e6d451bc5843364e878bb2011e3b = $(cat st.diff1 | sha256sum | awk '{print $1}') ]
        git apply st.diff1
        curl https://st.suckless.org/patches/solarized/st-solarized-dark-20180411-041912a.diff > st.diff2
        [ b2d5e88a2616eafb82b2fefb63eecb0f9d71f839349ef40f9f69c1953444f88c = $(cat st.diff2 | sha256sum | awk '{print $1}') ]
        git apply st.diff2
        curl https://st.suckless.org/patches/dynamic-cursor-color/st-dynamic-cursor-color-0.8.4.diff > st.diff3
        [ c942f73cd576c2d275dea21a733bc8bcfe66fb186b86563b03d42a123fbe93b8 = $(cat st.diff3 | sha256sum | awk '{print $1}') ]
        git apply st.diff3
	    sed -i '/char \*font/s/.*/char \*font = "Inconsolata Nerd Font:pixelsize=20:style=Bold:antialias=true:autohint=true";/' config.def.h
	    # sed -i '/char font/s/.*/char font[] = "Inconsolata Nerd Font:pixelsize=24:style=Bold:antialias=true:autohint=true";/' config.def.h
        # sed -i "s/2aa198/39a59d/" config.def.h # small dial down solarized cyan
        # sed -i "s/2aa198/4ba59e/" config.def.h # big dial down solarized cyan
        sed -i 's/st-256color/st-16color/' config.def.h # TODO use 256 enables fancier emacs themes, but needs a lot of customization
        sed -i 's:/bin/sh:/bin/bash:' config.def.h
        sed -i 's:cursorshape = 2:cursorshape = 6:' config.def.h
	    #echo 'INCS += -I/usr/include/freetype2' >> config.mk

        tmp=$(mktemp)

        cat > $tmp <<'EOF'
diff --git a/config.mk b/config.mk
index c070a4a..cb58ced 100644
--- a/config.mk
+++ b/config.mk
@@ -22,7 +22,7 @@ LIBS = -L$(X11LIB) -lm -lrt -lX11 -lutil -lXft \

 # flags
 STCPPFLAGS = -DVERSION=\"$(VERSION)\" -D_XOPEN_SOURCE=600
-STCFLAGS = $(INCS) $(STCPPFLAGS) $(CPPFLAGS) $(CFLAGS)
+STCFLAGS = $(INCS) $(STCPPFLAGS) $(CPPFLAGS) -O3 -flto -march=native -mtune=native
 STLDFLAGS = $(LIBS) $(LDFLAGS)

 # OpenBSD:

EOF

        patch -p1 < $tmp

	    make clean
	    make
	    sudo make install
    )
)

# (
    # cd /usr/share/fonts/TTF
    #if ag medium; then
    #    sudo agr -y -n medium bold
    #fi
# )

(
    IFS=""
    opts="
DefaultTimeoutStartSec=30s
DefaultTimeoutStopSec=30s
"
    for opt in $opts; do
        if ! ag "^$opt" /etc/systemd/system.conf; then
            echo $opt | sudo tee -a /etc/systemd/system.conf
        fi
    done
)

curl --fail --no-progress-meter https://raw.githubusercontent.com/nathants/bootstraps/6b4127456411dba7e7db5f9416ea5a57df1d254e/limits.sh | bash
curl --fail --no-progress-meter https://raw.githubusercontent.com/nathants/bootstraps/cdbd97781df27bcdbb144a40bc63e57e72cca744/sshd.sh | bash

sudo sed -i -r 's/^#(Handle[^=]+).*/\1=suspend/' /etc/systemd/logind.conf

if ! cat /etc/X11/xorg.conf | grep DontZap; then
echo '
Section "ServerFlags"
    Option "DontVTSwitch" "True"
    Option "DontZap"      "True"
EndSection
' | sudo tee -a /etc/X11/xorg.conf
fi

echo '
Section "InputClass"
            Identifier "My Mouse"
            Driver "libinput"
            MatchIsPointer "yes"
            Option "AccelProfile" "flat"
        	Option "AccelSpeed" "0"
EndSection
' | sudo tee /usr/share/X11/xorg.conf.d/95-mouse-accel.conf
# confirm with xinput list-props {1..50} 2>/dev/null | fgrep 'libinput Accel Profile Enabled ('
# should see: 0, 1, 0

echo 'if black lines appear during gameplay, add this to xorg.conf section device: Option "FlatPanelProperties" "Dithering = disabled"'

echo blacklist pcspkr | sudo tee /etc/modprobe.d/nobeep.conf

# handle nvidia cryptsetup shutdown nonsense
echo '#!/bin/sh
# remove nvidia modules
/usr/bin/modprobe -r nvidia_drm nvidia_modeset nvidia_uvm && /usr/bin/modprobe -r nvidia
' | sudo tee /usr/lib/systemd/system-shutdown/nvidia.shutdown

echo type and hit enter: startx
